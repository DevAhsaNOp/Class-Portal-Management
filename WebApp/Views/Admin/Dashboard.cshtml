@using Application.ClientFeatures.Admin.Response
@model UserAndInstructorDetails

@{
    Layout = "~/Views/Shared/_AdminDashboardLayout.cshtml";

}

<style>
    .table th, .table td {
        vertical-align: baseline !important;
        text-align: center !important;
    }

    .dashboard-header {
        background-image: url(../img/dashboardWave.svg) !important;
        background-size: cover !important;
    }
</style>

<div class="container-fluid dashboard-header">
    <button type="button" id="sidebarCollapse" class="btn btn-primary m-2">
        <i class="fa fa-bars"></i>
        <span class="sr-only">Toggle Menu</span>
    </button>
    <div class="row">
        <div class="col-md-4 col-sm-12 col-lg-4">
            <h2 class="my-4 font-weight-bolder text-white">Admin Dashboard</h2>
            <h2 class="my-4 font-weight-bolder bg-info text-white rounded p-1">Welcome Back Admin 🙂</h2>
            <canvas id="canvas" width="200" height="200">
            </canvas>
        </div>
        <div class="col-md-8 col-sm-12 col-lg-8 text-right">
            <img src="~/img/dashboard.svg" style="width: 40rem !important; height: 25rem !important;" />
        </div>
    </div>
</div>

<div class="p-3">
    @if (Model.NonActiveUsers is not null && Model.NonActiveUsers.Count > 0)
    {
        <h3 class="my-4 font-weight-normal bg-secondary text-white p-2 rounded d-inline-block">Users Waiting For Approval</h3>

        <table class="table my-3 table-bordered">
            <thead class="table-info">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Image</th>
                    <th scope="col">Fullname</th>
                    <th scope="col">Username</th>
                    <th scope="col">Email</th>
                    <th scope="col">Status</th>
                    <th scope="col">Joined At</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int x = 1;
                    foreach (var user in Model.NonActiveUsers)
                    {
                        <tr>
                            <th scope="row">@x</th>
                            <td><img src="@user.Image" width="50" height="50" alt="UserImage @user.Username" /></td>
                            <td>@user.FullName</td>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            @if (user.Status == 1)
                            {
                                <td>
                                    <span class="badge badge-success" style="font-size: 12px">Active</span>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <span class="badge badge-danger" style="font-size: 12px">Inactive</span>
                                </td>
                            }
                            <td>@user.CreatedAt.Value.ToString("dd-MM-yyyy hh:mm tt")</td>
                        </tr>
                        x++;
                    }
                }
                <tr>
                    <th class="text-center" colspan="7">
                        <button class="btn btn-info">
                            View All
                        </button>
                    </th>
                </tr>
            </tbody>
        </table>
    }

    @if (Model.Users is not null && Model.Users.Count > 0)
    {
        <h3 class="my-4 font-weight-normal bg-primary text-white p-2 rounded d-inline">Newly Enrolled Users</h3>
        <button class="btn btn-success float-right">Add New User</button>

        <table class="table my-3 table-bordered">
            <thead class="table-info">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Image</th>
                    <th scope="col">Fullname</th>
                    <th scope="col">Username</th>
                    <th scope="col">Email</th>
                    <th scope="col">Status</th>
                    <th scope="col">Joined At</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int i = 1;
                    foreach (var user in Model.Users)
                    {
                        <tr>
                            <th scope="row">@i</th>
                            <td><img src="@user.Image" width="50" height="50" alt="UserImage @user.Username" /></td>
                            <td>@user.FullName</td>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            @if (user.Status == 1)
                            {
                                <td>
                                    <span class="badge badge-success" style="font-size: 12px">Active</span>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <span class="badge badge-danger" style="font-size: 12px">Inactive</span>
                                </td>
                            }
                            <td>@user.CreatedAt.Value.ToString("dd-MM-yyyy hh:mm tt")</td>
                        </tr>
                        i++;
                    }
                }
                <tr>
                    <th class="text-center" colspan="7">
                        <button class="btn btn-info">
                            View All
                        </button>
                    </th>
                </tr>
            </tbody>
        </table>
    }

    @if (Model.Instructors is not null && Model.Instructors.Count > 0)
    {
        <h3 class="my-4 font-weight-normal bg-primary text-white p-2 rounded d-inline">Newly Joined Instructors</h3>
        <button class="btn btn-success float-right">Add New Instructor</button>

        <table class="table my-3 table-bordered">
            <thead class="table-info">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Image</th>
                    <th scope="col">Fullname</th>
                    <th scope="col">Username</th>
                    <th scope="col">Email</th>
                    <th scope="col">Qualification</th>
                    <th scope="col">Gender</th>
                    <th scope="col">Status</th>
                    <th scope="col">Joined At</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int j = 1;
                    foreach (var user in Model.Instructors)
                    {
                        <tr>
                            <th scope="row">@j</th>
                            <td><img src="@user.Image" width="50" height="50" alt="UserImage @user.Username" /></td>
                            <td>@user.FullName</td>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            <td>@user.Qualification</td>
                            <td>@user.Gender</td>
                            @if (user.Status == 1)
                            {
                                <td>
                                    <span class="badge badge-success" style="font-size: 12px">Active</span>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <span class="badge badge-danger" style="font-size: 12px">Inactive</span>
                                </td>
                            }
                            <td>@user.CreatedAt.Value.ToString("dd-MM-yyyy hh:mm tt")</td>
                        </tr>
                        j++;
                    }
                }
                <tr>
                    <th class="text-center" colspan="9">
                        <button class="btn btn-info">
                            View All
                        </button>
                    </th>
                </tr>
            </tbody>
        </table>
    }
</div>

<script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    let radius = canvas.height / 2;
    ctx.translate(radius, radius);
    radius = radius * 0.90
    setInterval(drawClock, 1000);

    function drawClock() {
        drawFace(ctx, radius);
        drawNumbers(ctx, radius);
        drawTime(ctx, radius);
    }

    function drawFace(ctx, radius) {
        const grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);
        grad.addColorStop(0, '#00BFA6');
        grad.addColorStop(0.5, 'white');
        grad.addColorStop(1, '#00BFA6');
        ctx.beginPath();
        ctx.arc(0, 0, radius, 0, 2 * Math.PI);
        ctx.fillStyle = 'white';
        ctx.fill();
        ctx.strokeStyle = grad;
        ctx.lineWidth = radius * 0.1;
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);
        ctx.fillStyle = '#000';
        ctx.fill();
    }

    function drawNumbers(ctx, radius) {
        ctx.font = radius * 0.15 + "px arial";
        ctx.textBaseline = "middle";
        ctx.textAlign = "center";
        for (let num = 1; num < 13; num++) {
            let ang = num * Math.PI / 6;
            ctx.rotate(ang);
            ctx.translate(0, -radius * 0.85);
            ctx.rotate(-ang);
            ctx.fillText(num.toString(), 0, 0);
            ctx.rotate(ang);
            ctx.translate(0, radius * 0.85);
            ctx.rotate(-ang);
        }
    }

    function drawTime(ctx, radius) {
        const now = new Date();
        let hour = now.getHours();
        let minute = now.getMinutes();
        let second = now.getSeconds();
        //hour
        hour = hour % 12;
        hour = (hour * Math.PI / 6) +
            (minute * Math.PI / (6 * 60)) +
            (second * Math.PI / (360 * 60));
        drawHand(ctx, hour, radius * 0.5, radius * 0.07);
        //minute
        minute = (minute * Math.PI / 30) + (second * Math.PI / (30 * 60));
        drawHand(ctx, minute, radius * 0.8, radius * 0.07);
        // second
        second = (second * Math.PI / 30);
        drawHand(ctx, second, radius * 0.9, radius * 0.02);
    }

    function drawHand(ctx, pos, length, width) {
        ctx.beginPath();
        ctx.lineWidth = width;
        ctx.lineCap = "round";
        ctx.moveTo(0, 0);
        ctx.rotate(pos);
        ctx.lineTo(0, -length);
        ctx.stroke();
        ctx.rotate(-pos);
    }
</script>
